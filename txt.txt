import java.util.ArrayList;
import java.util.List;

// Define una tarea genérica que puede ser extendida (OCP)

abstract class Task {
 protected String title;
 protected String description;

 public Task(String title, String description) {
 this.title = title;
 this.description = description;
 }

 public abstract void completeTask();
}

/* Aplicación de SRP: Clase Task que solo maneja la información básica de una tarea y su estado, no se encarga de la logística de asignación o notificación */

class CodingTask extends Task {
 public CodingTask(String title, String description) {
 super(title, description);
 }

 @Override
 public void completeTask() {
 System.out.println("Completando la tarea de codificación: " + title);
 }
}

/* ISP: Esta interfaz asegura que los objetos que pueden ser notificados implementen este método. No se obliga a otras clases a implementar métodos de notificación que no necesiten. */

interface Notifiable {
 void notify(String message);
}

// Clase Employee implementa Notifiable cumpliendo con ISP y LSP

class Employee implements Notifiable {
 private String name;

 public Employee(String name) {
 this.name = name;
 }

 @Override
 public void notify(String message) {
 System.out.println(name + ": " + message);
 }
}

/* Aplicación de DIP: TaskManager depende de abstracciones (Notifiable, Task), no de clases concretas. Esto facilita la adición de nuevos tipos de tareas y métodos de notificación sin cambiar el gestor. */

class TaskManager {
 private List<Task> tasks = new ArrayList<>();
 private List<Notifiable> notifiables = new ArrayList<>();

 public void addTask(Task task) {
 tasks.add(task);
 System.out.println("Tarea adicionada: " + task.title);
 }

 public void assignTask(Task task, Notifiable notifiable) {
 notifiables.add(notifiable);
 notifiable.notify("Fue asignado a la tarea: " + task.title);
 }

 public void completeTask(Task task) {
 task.completeTask();
 notifyAll("Tarea completada: " + task.title);
 }

 private void notifyAll(String message) {
 for (Notifiable notifiable : notifiables) {
 notifiable.notify(message);
 }
 }
}

// Main class to run the application

public class TaskSystem {
 public static void main(String[] args) {
 Task codingTask = new CodingTask("Corregir errores", "Corregir todos los errores en el código de producción.");
 Employee dev = new Employee("Marcelo Antezana");

 TaskManager manager = new TaskManager();
 manager.addTask(codingTask);
 manager.assignTask(codingTask, dev);
 manager.completeTask(codingTask);
 }
}
